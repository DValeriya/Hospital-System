CREATE OR REPLACE FUNCTION Create_User(
    USER_NAME VARCHAR2,
    PASSWORD VARCHAR2,
    PHONENUMBER VARCHAR2,
    BIRTHDATE DATE,
    EMAIL VARCHAR2,
    ROLE NUMBER)
    RETURN NUMBER
IS
    USER_ID NUMBER;
    USER_LOGIN NUMBER;
BEGIN
    SELECT OBJECT_ID_SEQ.NEXTVAL INTO USER_ID FROM DUAL;
    SELECT USER_LOGIN_SEQ.NEXTVAL INTO USER_LOGIN FROM DUAL;
    INSERT INTO OBJECTS(OBJECT_ID, PARENT_ID, OBJECT_TYPE_ID, NAME)
    VALUES(USER_ID, NULL, 1, USER_NAME);
    INSERT INTO ATTRIBUTES(ATTR_ID, OBJECT_ID, VALUE)
    VALUES(1, USER_ID, USER_LOGIN);
    INSERT INTO ATTRIBUTES(ATTR_ID, OBJECT_ID, VALUE)
    VALUES(2, USER_ID, PASSWORD);
    INSERT INTO ATTRIBUTES(ATTR_ID, OBJECT_ID, VALUE)
    VALUES(4, USER_ID, PHONENUMBER);

    IF BIRTHDATE IS NOT NULL
    THEN
        INSERT INTO ATTRIBUTES(ATTR_ID, OBJECT_ID, DATE_VALUE)
        VALUES(5, USER_ID, BIRTHDATE);
    END IF;
    IF EMAIL IS NOT NULL AND LENGTH(EMAIL) > 0
    THEN
        INSERT INTO ATTRIBUTES(ATTR_ID, OBJECT_ID, VALUE)
        VALUES(6, USER_ID, EMAIL);
    END IF;
    INSERT INTO ATTRIBUTES(ATTR_ID, OBJECT_ID, LIST_VALUE_ID)
    VALUES(7, USER_ID, ROLE);

    RETURN USER_ID;
END;
/

CREATE OR REPLACE PROCEDURE Edit_User(
    USER_ID NUMBER,
    USER_NAME VARCHAR2,
    PASSWORD VARCHAR2,
    PHONENUMBER VARCHAR2,
    BIRTHDATE DATE,
    EMAIL VARCHAR2) AS
BEGIN
    UPDATE OBJECTS O SET O.NAME = USER_NAME WHERE OBJECT_ID = USER_ID;
    UPDATE ATTRIBUTES A SET A.VALUE = PASSWORD
    WHERE OBJECT_ID = USER_ID AND A.ATTR_ID = 2;
    UPDATE ATTRIBUTES A SET A.VALUE = PHONENUMBER
    WHERE OBJECT_ID = USER_ID AND A.ATTR_ID = 4;
    IF BIRTHDATE IS NOT NULL
    THEN
        UPDATE ATTRIBUTES A SET A.DATE_VALUE = BIRTHDATE
        WHERE A.OBJECT_ID = USER_ID AND A.ATTR_ID = 5;
    END IF;
    IF EMAIL IS NOT NULL
    THEN
        UPDATE ATTRIBUTES A SET A.VALUE = EMAIL
        WHERE A.OBJECT_ID = USER_ID AND A.ATTR_ID = 6;
    END IF;
END;
/

CREATE OR REPLACE FUNCTION Create_DoctorSpec(
    TITLE VARCHAR2)
    RETURN NUMBER
IS
    SPEC_ID NUMBER;
BEGIN
    SELECT OBJECT_ID_SEQ.NEXTVAL INTO SPEC_ID FROM DUAL;
    INSERT INTO OBJECTS(OBJECT_ID, PARENT_ID, OBJECT_TYPE_ID, NAME)
        VALUES(SPEC_ID, NULL, 6, SPEC_ID);
    INSERT INTO ATTRIBUTES (ATTR_ID, OBJECT_ID, VALUE)
        VALUES (29, SPEC_ID, TITLE);

    RETURN SPEC_ID;
END;
/

CREATE OR REPLACE PROCEDURE EDIT_EMPLOYER_DATA (
    STATUS NUMBER,
    START_WORKING_TIME VARCHAR2,
    END_WORKING_TIME VARCHAR2,
    EMPLOYER_ID NUMBER) AS BEGIN
    UPDATE ATTRIBUTES STATUS SET STATUS.LIST_VALUE_ID = STATUS
    WHERE STATUS.ATTR_ID = 10 AND STATUS.OBJECT_ID = EMPLOYER_ID;
    UPDATE ATTRIBUTES START_WORKING_TIME SET START_WORKING_TIME.VALUE = START_WORKING_TIME
    WHERE START_WORKING_TIME.ATTR_ID = 11 AND START_WORKING_TIME.OBJECT_ID = EMPLOYER_ID;
    UPDATE ATTRIBUTES END_WORKING_TIME SET END_WORKING_TIME.VALUE = END_WORKING_TIME
    WHERE END_WORKING_TIME.ATTR_ID = 12 AND END_WORKING_TIME.OBJECT_ID = EMPLOYER_ID;
END;
/

CREATE OR REPLACE FUNCTION CREATE_EMPLOYER_DATA(
    HIRING_DATE DATE,
    STATUS NUMBER,
    START_WORKING_TIME VARCHAR2,
    END_WORKING_TIME VARCHAR2,
    EMP_PARENT_ID NUMBER) RETURN NUMBER IS
    EMP_DATA_ID NUMBER;
BEGIN
    SELECT OBJECT_ID_SEQ.NEXTVAL INTO EMP_DATA_ID FROM DUAL;
    INSERT INTO OBJECTS(OBJECT_ID, PARENT_ID, OBJECT_TYPE_ID, NAME, DESCRIPTION)
    VALUES(EMP_DATA_ID, EMP_PARENT_ID, 2, EMP_DATA_ID, NULL);
    INSERT INTO ATTRIBUTES (ATTR_ID, OBJECT_ID, DATE_VALUE)
    VALUES (9, EMP_DATA_ID, HIRING_DATE);
    INSERT INTO ATTRIBUTES (ATTR_ID, OBJECT_ID, LIST_VALUE_ID)
    VALUES (10, EMP_DATA_ID, STATUS);
    INSERT INTO ATTRIBUTES (ATTR_ID, OBJECT_ID, VALUE)
    VALUES (11, EMP_DATA_ID, START_WORKING_TIME);
    INSERT INTO ATTRIBUTES (ATTR_ID, OBJECT_ID, VALUE)
    VALUES (12, EMP_DATA_ID, END_WORKING_TIME);

    RETURN EMP_DATA_ID;
END;
/

CREATE OR REPLACE FUNCTION CREATE_WORK_DAY(
    EMPLOYER_ID NUMBER,
    WORK_DATE DATE)
    RETURN NUMBER
IS
    WORK_DAY_ID NUMBER;
BEGIN
    SELECT OBJECT_ID_SEQ.NEXTVAL INTO WORK_DAY_ID FROM DUAL;
    INSERT INTO OBJECTS(OBJECT_ID, PARENT_ID, OBJECT_TYPE_ID, NAME)
    VALUES(WORK_DAY_ID, EMPLOYER_ID, 3, WORK_DAY_ID);
    INSERT INTO ATTRIBUTES(ATTR_ID, OBJECT_ID, DATE_VALUE)
    VALUES(15, WORK_DAY_ID, WORK_DATE);

    RETURN WORK_DAY_ID;
END;
/

CREATE OR REPLACE PROCEDURE DELETE_WORK_DAY(WORK_DAY_ID NUMBER) AS
BEGIN
    DELETE FROM ATTRIBUTES WHERE OBJECT_ID = WORK_DAY_ID;
    DELETE FROM OBJECTS WHERE OBJECT_ID = WORK_DAY_ID;
END;
/

CREATE OR REPLACE PROCEDURE UPDATE_GENINFO(GEN_OBJECT_ID NUMBER, GEN_ADDRESS VARCHAR2, GEN_PHONE VARCHAR2, GEN_WORKING_START VARCHAR2, GEN_WORKING_END VARCHAR2)
    IS
BEGIN
    UPDATE ATTRIBUTES ADDRESS SET ADDRESS.VALUE = GEN_ADDRESS
    WHERE ADDRESS.ATTR_ID = 30
      AND ADDRESS.OBJECT_ID = GEN_OBJECT_ID;
    UPDATE ATTRIBUTES PHONE SET PHONE.VALUE = GEN_PHONE
    WHERE PHONE.ATTR_ID = 31
      AND PHONE.OBJECT_ID = GEN_OBJECT_ID;
    UPDATE ATTRIBUTES WORKING_START SET WORKING_START.VALUE = GEN_WORKING_START
    WHERE WORKING_START.ATTR_ID = 32
      AND WORKING_START.OBJECT_ID = GEN_OBJECT_ID;
    UPDATE ATTRIBUTES WORKING_END SET WORKING_END.VALUE = GEN_WORKING_END
    WHERE WORKING_END.ATTR_ID = 33
      AND WORKING_END.OBJECT_ID = GEN_OBJECT_ID;
END;
/

CREATE OR REPLACE FUNCTION CREATE_GEN_INFO(GEN_ADDRESS VARCHAR2,
                            GEN_PHONE VARCHAR2, GEN_WORKING_START
                            VARCHAR2, GEN_WORKING_END VARCHAR2)
                            RETURN NUMBER
IS
    GEN_OBJECT_ID NUMBER;
BEGIN
    SELECT OBJECT_ID_SEQ.NEXTVAL INTO GEN_OBJECT_ID FROM DUAL;

    INSERT INTO OBJECTS (OBJECT_ID, PARENT_ID, OBJECT_TYPE_ID, NAME, DESCRIPTION)
        VALUES (GEN_OBJECT_ID, NULL, 7, GEN_OBJECT_ID, NULL);

    INSERT INTO ATTRIBUTES (ATTR_ID, OBJECT_ID, VALUE)
        VALUES (30, GEN_OBJECT_ID, GEN_ADDRESS);
    INSERT INTO ATTRIBUTES (ATTR_ID, OBJECT_ID, VALUE)
        VALUES (31, GEN_OBJECT_ID, GEN_PHONE);
    INSERT INTO ATTRIBUTES (ATTR_ID, OBJECT_ID, VALUE)
        VALUES (32, GEN_OBJECT_ID, GEN_WORKING_START);
    INSERT INTO ATTRIBUTES (ATTR_ID, OBJECT_ID, VALUE)
        VALUES (33, GEN_OBJECT_ID, GEN_WORKING_END);

    RETURN GEN_OBJECT_ID;
END;
/

CREATE OR REPLACE FUNCTION CREATE_DOCTOR_DATA(APPOINTMENT_DURATION VARCHAR2,
                                PARENT NUMBER, SPECIALIZATION NUMBER)
                                RETURN NUMBER
IS
    DOCTORDATA_OBJECT_ID NUMBER;
BEGIN
    SELECT OBJECT_ID_SEQ.NEXTVAL INTO DOCTORDATA_OBJECT_ID FROM DUAL;

    INSERT INTO OBJECTS (OBJECT_ID, PARENT_ID, OBJECT_TYPE_ID, NAME, DESCRIPTION)
        VALUES (DOCTORDATA_OBJECT_ID, PARENT, 4, DOCTORDATA_OBJECT_ID, NULL);

    INSERT INTO ATTRIBUTES (ATTR_ID, OBJECT_ID, VALUE)
        VALUES (18, DOCTORDATA_OBJECT_ID, APPOINTMENT_DURATION);
    INSERT INTO OBJREFERENCE (ATTR_ID, REFERENCE, OBJECT_ID)
        VALUES (17, SPECIALIZATION, DOCTORDATA_OBJECT_ID);

    RETURN DOCTORDATA_OBJECT_ID;
END;
/

CREATE OR REPLACE PROCEDURE UPDATE_DOCTOR_DATA(DOCTORDATA_OBJECT_ID NUMBER, DOCTORDATA_APPOINTMENTDURATION VARCHAR2, SPECIALIZATION NUMBER)
    IS
BEGIN
    UPDATE ATTRIBUTES SET VALUE = DOCTORDATA_APPOINTMENTDURATION
    WHERE ATTR_ID = 18 AND OBJECT_ID = DOCTORDATA_OBJECT_ID;
    UPDATE OBJREFERENCE SET REFERENCE = SPECIALIZATION
    WHERE ATTR_ID = 17 AND OBJECT_ID = DOCTORDATA_OBJECT_ID;
END;
/

CREATE OR REPLACE FUNCTION Create_Appointment(
    EXPSTART VARCHAR2,
    EXPEND VARCHAR2,
    ACTSTART VARCHAR2,
    ACTEND Varchar2,
    DOCTORID NUMBER,
    PATIENTID NUMBER := null,
    DIAGNOSIS VARCHAR2,
    REFFERAL VARCHAR2,
    NXTAPP Number,
    STATUS VARCHAR2
) RETURN NUMBER
IS
    APP_ID NUMBER;
BEGIN
    SELECT OBJECT_ID_SEQ.nextval INTO APP_ID FROM DUAL;
    INSERT INTO OBJECTS(OBJECT_ID, PARENT_ID, OBJECT_TYPE_ID, NAME)
    VALUES(APP_ID, NULL, 5, CONCAT('appointment',  TO_CHAR(APP_ID)));
    INSERT INTO ATTRIBUTES(ATTR_ID, OBJECT_ID, VALUE, DATE_VALUE, LIST_VALUE_ID)
    VALUES(19, APP_ID, null, TO_DATE(EXPSTART, 'DD/MM/YYYY HH24:Mi"'), null);
    INSERT INTO ATTRIBUTES(ATTR_ID, OBJECT_ID, VALUE, DATE_VALUE, LIST_VALUE_ID)
    VALUES(20, APP_ID, null, TO_DATE(EXPEND, 'DD/MM/YYYY HH24:Mi"'), null);
    IF ACTSTART IS NOT NULL THEN
        INSERT INTO ATTRIBUTES(ATTR_ID, OBJECT_ID, VALUE, DATE_VALUE, LIST_VALUE_ID)
        VALUES(21, APP_ID, null, ACTSTART, null);
    end if;
    IF ACTEND IS NOT NULL THEN
        INSERT INTO ATTRIBUTES(ATTR_ID, OBJECT_ID, VALUE, DATE_VALUE, LIST_VALUE_ID)
        VALUES(22, APP_ID, null, ACTEND, null);
    end if;
    INSERT INTO OBJREFERENCE(ATTR_ID, REFERENCE, OBJECT_ID)
    VALUES(23, APP_ID, DOCTORID);
    IF PATIENTID IS NOT NULL THEN
        INSERT INTO OBJREFERENCE(ATTR_ID, REFERENCE, OBJECT_ID)
        VALUES(24, APP_ID, PATIENTID);
    END IF;
    IF DIAGNOSIS IS NOT NULL THEN
        INSERT INTO ATTRIBUTES(ATTR_ID, OBJECT_ID, VALUE, DATE_VALUE, LIST_VALUE_ID)
        VALUES(25, APP_ID, DIAGNOSIS, null, null);
    end if;
    IF REFFERAL IS NOT NULL THEN
        INSERT INTO ATTRIBUTES(ATTR_ID, OBJECT_ID, VALUE, DATE_VALUE, LIST_VALUE_ID)
        VALUES(26, APP_ID, REFFERAL, null, null);
    end if;
    IF NXTAPP IS NOT NULL THEN
        INSERT INTO OBJREFERENCE(ATTR_ID, REFERENCE, OBJECT_ID)
        VALUES(27, APP_ID, NXTAPP);
    end if;
    INSERT INTO ATTRIBUTES(ATTR_ID, OBJECT_ID, VALUE, DATE_VALUE, LIST_VALUE_ID)
    VALUES(28, APP_ID, null, null, (Select LISTS.LIST_VALUE_ID FROM LISTS WHERE LISTS.LIST_VALUE_ID = STATUS));

    RETURN APP_ID;
END;
/

CREATE OR REPLACE PROCEDURE Update_Appointment(
    ID VARCHAR2,
    EXPSTART VARCHAR2 := null,
    EXPEND VARCHAR2 := null,
    ACTSTART VARCHAR2 := null,
    ACTEND VARCHAR2 := null,
    DOCTORID NUMBER := null,
    PATIENTID NUMBER := null,
    DIAGNOSIS VARCHAR2 := null,
    REFFERAL VARCHAR2 := null,
    NXTAPP Number := null,
    STATUS VARCHAR2 := null
) AS BEGIN
    IF EXPSTART IS NOT NULL THEN
        MERGE INTO ATTRIBUTES
        USING DUAL ON (ATTRIBUTES.ATTR_ID = 19 AND ATTRIBUTES.OBJECT_ID = ID)
        WHEN MATCHED THEN UPDATE SET ATTRIBUTES.VALUE = EXPSTART
        WHEN NOT MATCHED THEN INSERT (attr_id, object_id, date_value) VALUES ( 19, ID, EXPSTART );
    END IF;
    IF EXPEND IS NOT NULL THEN
        MERGE INTO ATTRIBUTES
        USING DUAL ON (ATTRIBUTES.ATTR_ID = 20 AND ATTRIBUTES.OBJECT_ID = ID)
        WHEN MATCHED THEN UPDATE SET ATTRIBUTES.VALUE = EXPEND
        WHEN NOT MATCHED THEN INSERT (attr_id, object_id, date_value) VALUES ( 20, ID, EXPEND );
    END IF;
    IF ACTSTART IS NOT NULL THEN
        MERGE INTO ATTRIBUTES
        USING DUAL ON (ATTRIBUTES.ATTR_ID = 21 AND ATTRIBUTES.OBJECT_ID = ID)
        WHEN MATCHED THEN UPDATE SET ATTRIBUTES.VALUE = ACTSTART
        WHEN NOT MATCHED THEN INSERT (attr_id, object_id, date_value) VALUES ( 21, ID, ACTSTART );
    END IF;
    IF ACTEND IS NOT NULL THEN
        MERGE INTO ATTRIBUTES
        USING DUAL ON (ATTRIBUTES.ATTR_ID = 22 AND ATTRIBUTES.OBJECT_ID = ID)
        WHEN MATCHED THEN UPDATE SET ATTRIBUTES.VALUE = ACTEND
        WHEN NOT MATCHED THEN INSERT (attr_id, object_id, date_value) VALUES ( 22, ID, ACTEND );
    END IF;
    IF DOCTORID IS NOT NULL THEN
        MERGE INTO OBJREFERENCE
        USING DUAL ON (REFERENCE = ID AND ATTR_ID = 23)
        WHEN NOT MATCHED THEN INSERT (attr_id, reference, object_id) VALUES ( 24, ID, DOCTORID )
        WHEN MATCHED THEN UPDATE SET OBJECT_ID = DOCTORID;
    END IF;
    IF PATIENTID IS NOT NULL THEN
        MERGE INTO OBJREFERENCE
        USING DUAL ON (REFERENCE = ID AND ATTR_ID = 24)
        WHEN NOT MATCHED THEN INSERT (attr_id, reference, object_id) VALUES ( 24, ID, PATIENTID )
        WHEN MATCHED THEN UPDATE SET OBJECT_ID = PATIENTID;
    END IF;
    IF DIAGNOSIS IS NOT NULL THEN
        MERGE INTO ATTRIBUTES
        USING DUAL ON (ATTRIBUTES.ATTR_ID = 25 AND ATTRIBUTES.OBJECT_ID = ID)
        WHEN MATCHED THEN UPDATE SET ATTRIBUTES.VALUE = DIAGNOSIS
        WHEN NOT MATCHED THEN INSERT (attr_id, object_id, value) VALUES ( 25, ID, DIAGNOSIS );
    END IF;
    IF REFFERAL IS NOT NULL THEN
        MERGE INTO ATTRIBUTES
        USING DUAL ON (ATTRIBUTES.ATTR_ID = 26 AND ATTRIBUTES.OBJECT_ID = ID)
        WHEN MATCHED THEN UPDATE SET ATTRIBUTES.VALUE = REFFERAL
        WHEN NOT MATCHED THEN INSERT (attr_id, object_id, value) VALUES ( 26, ID, REFFERAL );
    END IF;
    IF NXTAPP IS NOT NULL THEN
        MERGE INTO OBJREFERENCE
        USING DUAL ON (REFERENCE = ID AND ATTR_ID = 27)
        WHEN NOT MATCHED THEN INSERT (attr_id, reference, object_id) VALUES ( 27, ID, NXTAPP )
        WHEN MATCHED THEN UPDATE SET OBJECT_ID = NXTAPP;
    END IF;
    IF STATUS IS NOT NULL THEN
        MERGE INTO ATTRIBUTES
        USING DUAL ON (ATTR_ID = 28 and OBJECT_ID = ID)
        WHEN MATCHED THEN UPDATE SET LIST_VALUE_ID = STATUS
        WHEN NOT MATCHED THEN INSERT (attr_id, object_id, list_value_id) VALUES ( 28, ID, STATUS );
    END IF;
END;
/

create or replace FUNCTION SAVE_RESET_PASSWORD(TOKEN_VALUE VARCHAR2,
                                USER_ID NUMBER) RETURN NUMBER
IS
    TOKEN_ID NUMBER;
BEGIN
    SELECT OBJECT_ID_SEQ.NEXTVAL INTO TOKEN_ID FROM DUAL;

    INSERT INTO OBJECTS (OBJECT_ID, PARENT_ID, OBJECT_TYPE_ID, NAME, DESCRIPTION)
        VALUES (TOKEN_ID, USER_ID, 8, TOKEN_VALUE, NULL);
    RETURN TOKEN_ID;
END;
/

create or replace PROCEDURE UPDATE_RESET_PASSwORD (TOKEN_ID NUMBER, TOKEN_VALUE VARCHAR2, USER_ID NUMBER)
IS
BEGIN
    UPDATE OBJECTS SET NAME = TOKEN_VALUE WHERE OBJECT_ID = TOKEN_ID;
END;
/

create or replace FUNCTION DELETE_TOKEN (TOKEN_ID NUMBER)
                                        RETURN NUMBER
IS
BEGIN
    DELETE FROM OBJECTS WHERE OBJECT_ID = TOKEN_ID;
    RETURN TOKEN_ID;
END;


CREATE OR REPLACE PROCEDURE PROGNOSIS2
AS
    TYPE list1 IS VARRAY(7) OF NUMBER;
    TYPE in_data IS TABLE OF shape;
    data_table in_data;
    prognosis_list list1 := list1() ;
    prognosis_list2 list1 := list1() ;
    prognosis VARCHAR(20);
BEGIN
    SELECT shape(DOCTOR.OBJECT_ID,
        AVG((MONTH1END.DATE_VALUE - MONTH1START.DATE_VALUE))*60*24,
        AVG((MONTH2END.DATE_VALUE - MONTH2START.DATE_VALUE))*60*24,
        AVG((MONTH3END.DATE_VALUE - MONTH3START.DATE_VALUE))*60*24,
        AVG((MONTH4END.DATE_VALUE - MONTH4START.DATE_VALUE))*60*24,
        AVG((MONTH5END.DATE_VALUE - MONTH5START.DATE_VALUE))*60*24,
        AVG((MONTH6END.DATE_VALUE - MONTH6START.DATE_VALUE))*60*24)
    BULK COLLECT INTO  data_table FROM OBJREFERENCE
    LEFT JOIN OBJECTS EMP ON EMP.OBJECT_TYPE_ID = 2
    LEFT JOIN OBJECTS DOCTOR ON EMP.OBJECT_ID = DOCTOR.PARENT_ID
    LEFT JOIN ATTRIBUTES MONTH1START ON OBJREFERENCE.REFERENCE = MONTH1START.OBJECT_ID AND MONTH1START.ATTR_ID=21
        AND MONTHS_BETWEEN(MONTH1START.DATE_VALUE,SYSDATE) < 0
    LEFT JOIN ATTRIBUTES MONTH1END ON OBJREFERENCE.REFERENCE = MONTH1END.OBJECT_ID AND MONTH1END.ATTR_ID = 22
        AND MONTHS_BETWEEN(MONTH1END.DATE_VALUE,SYSDATE) >= -1
    LEFT JOIN ATTRIBUTES MONTH2START ON OBJREFERENCE.REFERENCE = MONTH2START.OBJECT_ID AND MONTH2START.ATTR_ID=21
        AND MONTHS_BETWEEN(MONTH2START.DATE_VALUE,SYSDATE) < -1
    LEFT JOIN ATTRIBUTES MONTH2END ON OBJREFERENCE.REFERENCE = MONTH2END.OBJECT_ID AND MONTH2END.ATTR_ID = 22
        AND MONTHS_BETWEEN(MONTH2END.DATE_VALUE,SYSDATE) >= -2
    LEFT JOIN ATTRIBUTES MONTH3START ON OBJREFERENCE.REFERENCE = MONTH3START.OBJECT_ID AND MONTH3START.ATTR_ID=21
        AND MONTHS_BETWEEN(MONTH3START.DATE_VALUE,SYSDATE) < -2
    LEFT JOIN ATTRIBUTES MONTH3END ON OBJREFERENCE.REFERENCE = MONTH3END.OBJECT_ID AND MONTH3END.ATTR_ID = 22
        AND MONTHS_BETWEEN(MONTH3END.DATE_VALUE,SYSDATE) >= -3
    LEFT JOIN ATTRIBUTES MONTH4START ON OBJREFERENCE.REFERENCE = MONTH4START.OBJECT_ID AND MONTH4START.ATTR_ID=21
        AND MONTHS_BETWEEN(MONTH4START.DATE_VALUE,SYSDATE) < -3
    LEFT JOIN ATTRIBUTES MONTH4END ON OBJREFERENCE.REFERENCE = MONTH4END.OBJECT_ID AND MONTH4END.ATTR_ID = 22
        AND MONTHS_BETWEEN(MONTH4END.DATE_VALUE,SYSDATE) >= -4
    LEFT JOIN ATTRIBUTES MONTH5START ON OBJREFERENCE.REFERENCE = MONTH5START.OBJECT_ID AND MONTH5START.ATTR_ID=21
        AND MONTHS_BETWEEN(MONTH5START.DATE_VALUE,SYSDATE) < -4
    LEFT JOIN ATTRIBUTES MONTH5END ON OBJREFERENCE.REFERENCE = MONTH5END.OBJECT_ID AND MONTH5END.ATTR_ID = 22
        AND MONTHS_BETWEEN(MONTH5END.DATE_VALUE,SYSDATE) >= -5
    LEFT JOIN ATTRIBUTES MONTH6START ON OBJREFERENCE.REFERENCE = MONTH6START.OBJECT_ID AND MONTH6START.ATTR_ID=21
        AND MONTHS_BETWEEN(MONTH6START.DATE_VALUE,SYSDATE) < -5
    LEFT JOIN ATTRIBUTES MONTH6END ON OBJREFERENCE.REFERENCE = MONTH6END.OBJECT_ID AND MONTH6END.ATTR_ID = 22
        AND MONTHS_BETWEEN(MONTH6END.DATE_VALUE,SYSDATE) >= -6
    WHERE EMP.PARENT_ID=OBJREFERENCE.OBJECT_ID
    GROUP BY DOCTOR.OBJECT_ID;
    FOR i IN data_table.FIRST .. data_table.LAST
        LOOP
        prognosis_list := list1();
        prognosis_list2 := list1();
            IF (data_table(i).MONTH1 IS NOT NULL ) THEN
                prognosis_list.extend();
                prognosis_list(prognosis_list.COUNT) := data_table(i).MONTH1;
            end if;
            IF (data_table(i).MONTH2 IS NOT NULL ) THEN
                prognosis_list.extend();
                prognosis_list(prognosis_list.COUNT) := data_table(i).MONTH2;
            end if;
            IF (data_table(i).MONTH3 IS NOT NULL ) THEN
                prognosis_list.extend();
                prognosis_list(prognosis_list.COUNT) := data_table(i).MONTH3;
            end if;
            IF (data_table(i).MONTH4 IS NOT NULL ) THEN
                prognosis_list.extend();
                prognosis_list(prognosis_list.COUNT) := data_table(i).MONTH4;
            end if;
            IF (data_table(i).MONTH5 IS NOT NULL ) THEN
                prognosis_list.extend();
                prognosis_list(prognosis_list.COUNT) := data_table(i).MONTH5;
            end if;
            IF (data_table(i).MONTH6 IS NOT NULL ) THEN
                prognosis_list.extend();
                prognosis_list(prognosis_list.COUNT) := data_table(i).MONTH6;
            end if;
            DBMS_OUTPUT.PUT_LINE(prognosis_list.COUNT);
            prognosis_list2.extend;
            prognosis_list2(prognosis_list2.COUNT) := prognosis_list(prognosis_list.FIRST);
            FOR j IN prognosis_list.FIRST .. prognosis_list.COUNT-1
                LOOP
                    prognosis_list2.extend();
                    prognosis_list2(j+1) := .4*prognosis_list(j) + .6*prognosis_list2(j);
                end loop;
            prognosis := prognosis_list2(prognosis_list2.LAST);
            UPDATE ATTRIBUTES SET VALUE = prognosis WHERE ATTR_ID = 18 AND OBJECT_ID = data_table(i).DOCTOR_ID;
        end loop;
end;

BEGIN
    DBMS_SCHEDULER.CREATE_JOB(
        JOB_NAME => 'Appointment_durations_prognosis',
        JOB_TYPE => 'PLSQL_BLOCK',
        JOB_ACTION => 'BEGIN PROGNOSIS2(); END;',
        REPEAT_INTERVAL => 'FREQ=MONTHLY; BYMONTHDAY=1',
        ENABLED => TRUE
        );
end;
